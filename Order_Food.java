/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotellerio;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Praveen Chandanala
 */
public class Order_Food extends javax.swing.JFrame {

    /**
     * Creates new form Order_Food
     */
    public Order_Food() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon2.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mealtype_2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        place_order = new javax.swing.JButton();
        no_of_Plate = new javax.swing.JTextField();
        cancel_04 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        custid_03 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        order_Id = new javax.swing.JTextField();
        done = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cust_err = new javax.swing.JLabel();
        orderid_err = new javax.swing.JLabel();
        num_err = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Order your Food here!");

        jLabel2.setText("Select your meal");

        mealtype_2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BreakFast", "Lunch-Veg", "Lunch-Non-Veg", "Snacks", "Dinner-Veg", "Dinner-Non-Veg" }));
        mealtype_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mealtype_2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter Number of Plates ");

        place_order.setText("Place Order");
        place_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place_orderActionPerformed(evt);
            }
        });

        no_of_Plate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                no_of_PlateActionPerformed(evt);
            }
        });
        no_of_Plate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                no_of_PlateKeyTyped(evt);
            }
        });

        cancel_04.setText("Cancel");
        cancel_04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_04ActionPerformed(evt);
            }
        });

        jLabel4.setText("Customer ID");

        custid_03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custid_03ActionPerformed(evt);
            }
        });
        custid_03.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                custid_03KeyTyped(evt);
            }
        });

        jLabel5.setText("Order Id");

        order_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                order_IdActionPerformed(evt);
            }
        });
        order_Id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                order_IdKeyTyped(evt);
            }
        });

        done.setText("Done");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotellerio/images/baker.png"))); // NOI18N

        jLabel7.setText("Your Food Is Being Cooked And Served In No Time...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(mealtype_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(order_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(8, 8, 8))
                                .addComponent(custid_03, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(no_of_Plate, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(num_err, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderid_err, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cust_err, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(97, 97, 97))))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(cancel_04)
                .addGap(45, 45, 45)
                .addComponent(place_order)
                .addGap(67, 67, 67)
                .addComponent(done)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(custid_03, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cust_err, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mealtype_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(order_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderid_err, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(no_of_Plate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(num_err, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(place_order)
                    .addComponent(cancel_04)
                    .addComponent(done))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void place_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_place_orderActionPerformed
        // TODO add your handling code here:
        if(custid_03.getText().trim().isEmpty() && order_Id.getText().trim().isEmpty() && no_of_Plate.getText().trim().isEmpty())
        {
            cust_err.setText("*This field is required");
            cust_err.setForeground(Color.red);
            orderid_err.setText("*This field is required");
            orderid_err.setForeground(Color.red);
            num_err.setText("*This field is required");
            num_err.setForeground(Color.red);
        }
        else if(custid_03.getText().trim().isEmpty())
        {
            cust_err.setText("*This field is required");
            cust_err.setForeground(Color.red);
            orderid_err.setText("");
            num_err.setText("");
        }
        else if(order_Id.getText().trim().isEmpty())
        {
            cust_err.setText("");
            orderid_err.setForeground(Color.red);
            orderid_err.setText("*This field is required");
            num_err.setText("");
        }
        else if(no_of_Plate.getText().trim().isEmpty())
        {
            cust_err.setText("");
            num_err.setForeground(Color.red);
            num_err.setText("*This field is required");
            orderid_err.setText("");
        }
        else{
            try {
                Connection con=DBConnect.connect();
            String sqlc="select cust_name from customer_details where cust_Id=?";
            PreparedStatement psc=con.prepareStatement(sqlc);
            psc.setInt(1,Integer.valueOf(custid_03.getText()));
            ResultSet rsc=psc.executeQuery();
            if(rsc.next())
            {
                long millis=System.currentTimeMillis();
    java.sql.Timestamp date1 ;
        date1 = new java.sql.Timestamp(millis);
        String str = (String)mealtype_2.getSelectedItem();
        String str1 = (String)order_Id.getText();
        int no_of_p=Integer.valueOf(no_of_Plate.getText());
        Random rnd = new Random();
        int order_id = rnd.nextInt(1000000);
        if(str=="BreakFast")
        {
            try {
                    String sql2="select price from breakfast_menu where id=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select item_name from breakfast_menu where id=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    
                    } 
        
            catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
        } 
       if(str=="Lunch-Veg")
       {
           try {
               String sql2="select price from lunch_menu where id1=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select item_name from lunch_menu where id1=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    
                    } 
        
            catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
        }
        if(str=="Lunch-Non-Veg"){try {
               String sql2="select price from lunch_non_veg_menu where id2=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select name from lunch_non_veg_menu where id2=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    } 
        
            catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
        }
       if(str=="Snacks")
       {
           try {
                
                    String sql2="select price from snacks_menu where id3=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select name from snacks_menu where id3=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    } 
        catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
        }
        if(str=="Dinner-Veg")
        {
            try {
               String sql2="select price from lunch_menu where id1=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select item_name from lunch_menu where id1=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    } 
        
            catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
        }
       if(str=="Dinner-Non-Veg")
       {
           try {
                String sql2="select price from lunch_non_veg_menu where id2=?";
                    PreparedStatement ps2 = con.prepareStatement(sql2);
                    ps2.setString(1,str1);
                    ResultSet rs2= ps2.executeQuery();
                    float f=0;
                    while(rs2.next())
                     {
                         f = rs2.getFloat(1);
                         System.out.println("price of 1 qty is "+f);
                     }
                    float t_price = f*no_of_p;
                    System.out.println("total price is "+t_price);
                    String sql3="select name from lunch_non_veg_menu where id2=?";
                    PreparedStatement ps3 = con.prepareStatement(sql3);
                    ps3.setString(1,str1);
                    ResultSet rs3= ps3.executeQuery();
                    String name_of= new String();
                    while(rs3.next())
                     {
                         name_of = rs3.getString(1);
                         System.out.println("name of qty is "+name_of);
                     }
                    String sql1= "insert into order_food values(?,?,?,?,?)";
                    PreparedStatement ps = con.prepareStatement(sql1);
                    ps.setInt(1,Integer.valueOf(custid_03.getText()));
                    ps.setString(2,name_of);
                    ps.setInt(3,Integer.valueOf(no_of_Plate.getText()));
                    ps.setFloat(4,t_price);
                    ps.setInt(5, order_id);
                    ps.executeUpdate();
                    
                    } 
        
            catch (SQLException ex) 
            {
                Logger.getLogger(Book_Food.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
        {
            custid_03.setText("");
            order_Id.setText("");
            no_of_Plate.setText("");
       }
            }}
            else{
                JOptionPane.showMessageDialog(null, "There is no customer with given ID.Please Enter details Again","Display Message",JOptionPane.INFORMATION_MESSAGE);
                    custid_03.setText("");
                    order_Id.setText("");
                    no_of_Plate.setText("");
            }
            
        }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e,"Display Message",JOptionPane.INFORMATION_MESSAGE);
            }
        } 
    }//GEN-LAST:event_place_orderActionPerformed

    private void cancel_04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_04ActionPerformed
this.setVisible(false);
new Food_Section().setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_cancel_04ActionPerformed

    private void mealtype_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mealtype_2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mealtype_2ActionPerformed

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new Food_Section().setVisible(true);

    }//GEN-LAST:event_doneActionPerformed

    private void no_of_PlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_no_of_PlateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_no_of_PlateActionPerformed

    private void order_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_order_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_order_IdActionPerformed

    private void custid_03KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custid_03KeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) ||(c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_custid_03KeyTyped

    private void custid_03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custid_03ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custid_03ActionPerformed

    private void order_IdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_order_IdKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) ||(c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_order_IdKeyTyped

    private void no_of_PlateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_no_of_PlateKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) ||(c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_no_of_PlateKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order_Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order_Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order_Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order_Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order_Food().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_04;
    private javax.swing.JLabel cust_err;
    private javax.swing.JTextField custid_03;
    private javax.swing.JButton done;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> mealtype_2;
    private javax.swing.JTextField no_of_Plate;
    private javax.swing.JLabel num_err;
    private javax.swing.JTextField order_Id;
    private javax.swing.JLabel orderid_err;
    private javax.swing.JButton place_order;
    // End of variables declaration//GEN-END:variables
}
